---
- name: localhost provisioning
  hosts: localhost
  connection: local
  become: yes
  tasks:
  - name: create aws security group
    amazon.aws.ec2_group:
      name: Ec2SecurityGroup1
      description: ec2 security groups for build and production servers
      rules:
        - proto: tcp
          ports:
          - 22
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 22
  - name: create ec2 instances
    amazon.aws.ec2:
      instance_type: t2.micro
      key_name: bf1
      image: ami-0ebc8f6f580a04647
      count: 2
      vpc_subnet_id: subnet-5fda0334
      group: Ec2SecurityGroup1
      region: us-east-2
      assign_public_ip: yes
      wait: yes
    register: ec2_info
  - name: add host to builder
    add_host:
      name: "{{ ec2_info.instances[0].public_ip }}"
      groups: builder
  - name: add host to production
    add_host:
      name: "{{ ec2_info.instances[1].public_ip }}"
      groups: production
  - name: Wait for SSH to come up
    local_action: wait_for 
                  host={{ item.public_ip }} 
                  port=22 
                  state=started
    with_items: "{{ec2_info.instances}}"  

- name: builder provisioning
  hosts: builder
  remote_user: ubuntu
  become: true
  tasks:
  - name: ensure required packages are present
    apt:
      update_cache: yes
      name: "{{ packages }}"
      state: present
    vars:
      packages:
        - git
        - default-jdk
        - maven
        - python3
        - python3-pip
  - name: ensure boto3 is present
    shell:
      cmd: pip3 install boto3
  - name: Set AWS KEY ID
    set_fact: aws_key_id="{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    delegate_to: localhost
  - name: Set AWS SECRET
    set_fact: aws_secret_key="{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    delegate_to: localhost
  - name: Get AWS KEY ID
    set_fact: aws_key_id={{hostvars[inventory_hostname]['aws_key_id']}}
  - name: Get AWS SECRET KEY
    set_fact: aws_secret_key={{hostvars[inventory_hostname]['aws_secret_key']}}
  - name: ensure boxfuse source code is cloned
    git:
      repo: https://github.com/boxfuse/boxfuse-sample-java-war-hello.git
      dest: /usr/local/boxfuse
  - name: ensure boxfuse source code is compiled
    shell:
      cmd: mvn -f /usr/local/boxfuse/pom.xml package
  - name: debug credentials
    debug:
      msg: "{{aws_secret_key}}"
  - name: debug credentials
    debug:
      msg: "{{aws_key_id}}"
  - name: sync artifact with s3 repo
    amazon.aws.aws_s3:
      aws_access_key: "{{aws_key_id}}"
      aws_secret_key: "{{aws_secret_key}}"
      bucket: backet.boleque.com
      object: ./artifacts/hello-1.0.war
      src: /usr/local/boxfuse/target/hello-1.0.war
      mode: put

- name: production provisioning
  hosts: production
  remote_user: ubuntu
  become: yes
  tasks:
  - name: ensure required packages are exist
    apt:
      update_cache: yes
      name: "{{ packages }}"
      state: present
    vars:
      packages:
        - tomcat8
        - python3
        - python3-pip
  - name: ensure boto3 is present
    shell:
      cmd: pip3 install boto3
  - name: Set AWS KEY ID
    set_fact: aws_key_id="{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    delegate_to: localhost
  - name: Set AWS SECRET
    set_fact: aws_secret_key="{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    delegate_to: localhost
  - name: Get AWS KEY ID
    set_fact: aws_key_id={{hostvars[inventory_hostname]['aws_key_id']}}
  - name: Get AWS SECRET KEY
    set_fact: aws_secret_key={{hostvars[inventory_hostname]['aws_secret_key']}}
  - name: ensure tomcat is started
    service:
      name: tomcat8
      state: started
  - name: sync artifact
    amazon.aws.aws_s3:
      aws_access_key: "{{aws_key_id}}"
      aws_secret_key: "{{aws_secret_key}}"
      bucket: backet.boleque.com
      object: ./artifacts/hello-1.0.war
      dest: /var/lib/tomcat/webapps/hello-1.0.war
      mode: get
